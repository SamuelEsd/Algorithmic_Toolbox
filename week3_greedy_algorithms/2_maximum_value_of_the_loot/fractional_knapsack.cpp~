#include <algorithm>
#include <iostream>
#include <vector>
#include <pair>
#include <iomanip>

using std::vector;
using std::pair;

double get_optimal_value(int capacity, vector<int> weights, vector<int> values) {
  double value = 0.0;
  vector<pair<double,double>> objects;
  for (int i = 0; i < weights.size(); i++){
    pair = std::make_pair(values[i]/weights[i]);
    objects.push_back;
  }
  std::sort(objects.begin(),objects.end());
  int last = objects.size()-1;
  for (int i = 0; i < capacity; i++){
    if(last-i < 0){
      break;
    }
    value += objects[last-i];
  }
  // write your code here

  return value;
}

int main() {
  int n;
  int capacity;
  std::cin >> n >> capacity;
  vector<int> values(n);
  vector<int> weights(n);
  for (int i = 0; i < n; i++) {
    std::cin >> values[i] >> weights[i];
  }

  double optimal_value = get_optimal_value(capacity, weights, values);

  std::cout.precision(7);
  std::cout << optimal_value << std::endl;
  return 0;
}
